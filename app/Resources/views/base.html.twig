<!DOCTYPE html>
<html ng-app="app">
<head>
    <meta charset="UTF-8"/>
    <title>{% block title %}Test Denis Hooke{% endblock %}</title>
    {% block stylesheets %}{% endblock %}
    <link rel="stylesheet" href="{{ asset('assets/vendor/bootstrap/dist/css/bootstrap.min.css') }}">
    <link rel="stylesheet" href="{{ asset('css/main.css') }}">
    <script src="{{ asset('assets/vendor/jquery/dist/jquery.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/angular/angular.min.js') }}"></script>
</head>
<body scroll="load()" ng-controller="appController" ng-init="load()">
<div class="container">
    <header>
        <div class="row">
            <div class="col-xs-6">
                <a href="//klika-tech.com/" class="logo" target="_blank">
                    <img src="//klika-tech.com/images/30378d67.logo.svg" />
                </a>
            </div>
            <div class="col-xs-6 text-right">
                <div class="author">author: <a href="mailto:denis.hooke@gmail.com">denis.hooke@gmail.com</a></div>
            </div>
        </div>
    </header>
    {% block container %}{% endblock %}
</div>

<script src="{{ asset('js/app.js') }}"></script>
<script>
    var app = angular.module("app", []);
    app
            .config(function ($interpolateProvider) {
                $interpolateProvider.startSymbol('[[').endSymbol(']]');
            })
            .controller('appController', ['$scope', '$http', '$timeout', function ($scope, $http, $timeout) {

                var app = appContainer;

                $scope.load = function () {

                    // Если все треки загружены
                    if (app.settings.tracksLoaded) return;

                    app.loading = true;
                    $timeout.cancel(app.settings.timeout);


                    app.settings.timeout = $timeout(function () {


                        $http
                                .get(app.settings.routing.loadTracks, {
                                    params: {
                                        page: app.settings.page++,
                                        sort: app.sort.field,
                                        order: app.sort.order,
                                        filter: app.filter
                                    }
                                })
                                .then(function (response) {

                                    var data = app.data;


                                    if (response.data.tracks.length < app.settings.itemsPerPage) {
                                        app.settings.tracksLoaded = true;
                                    }

                                    data.tracks = data.tracks.concat(response.data.tracks);
                                    data.filter = response.data.filter;

                                    app.loading = false;

                                });

                    }, app.settings.httpDelay);
                },
                        $scope.sort = function () {

                            app.loading = true;
                            $http
                                    .get(app.settings.routing.sortTracks, {
                                        params: {
                                            page: app.settings.page,
                                            sort: app.sort.field,
                                            order: app.sort.order,
                                            filter: app.filter
                                        }
                                    })
                                    .then(function (response) {

                                        var data = app.data;
                                        data.tracks = response.data.tracks;
                                        app.loading = false;


                                    });
                        },
                        $scope.filter = function () {

                            app.loading = true;
                            $timeout.cancel(app.settings.timeout);


                            app.settings.timeout = $timeout(function () {


                                $http
                                        .get(app.settings.routing.loadTracks, {
                                            params: {
                                                page: app.settings.page,
                                                sort: app.sort.field,
                                                order: app.sort.order,
                                                filter: app.filter
                                            }
                                        })
                                        .then(function (response) {

                                            var data = app.data;
                                            data.tracks = response.data.tracks;
                                            app.loading = false;

                                        });

                            }, app.settings.httpDelay);
                        }

                $scope.app = app;
            }])
            .directive("scroll", function ($window) {
                return function (scope) {
                    angular.element($window).bind("scroll", function () {

                        if (this.pageYOffset + this.outerHeight >= $(document).height() - 200) {

                            scope.load();
                        }

                        scope.$apply();
                    });
                };
            })
            .filter('formatDuration', function () {
                return function (duration) {

                    var minutes = parseInt(duration / 60, 10),
                            seconds = duration % 60,
                            seconds = (seconds < 10) ? "0" + seconds : seconds
                            ;

                    return minutes + ":" + seconds;
                }
            });
</script>

{% block javascripts %}{% endblock %}
</body>
</html>
