var app=angular.module("app",[]);app.config(function(t){t.startSymbol("[[").endSymbol("]]")}).controller("appController",["$scope","$http","$timeout",function(t,e,r){var a=appContainer;t.load=function(){a.settings.tracksLoaded||(a.loading=!0,r.cancel(a.settings.timeout),a.settings.timeout=r(function(){e.get(a.settings.routing.loadTracks,{params:{page:a.settings.page++,sort:a.sort.field,order:a.sort.order,filter:a.filter}}).then(function(t){var e=a.data;t.data.tracks.length<a.settings.itemsPerPage&&(a.settings.tracksLoaded=!0),e.tracks=e.tracks.concat(t.data.tracks),e.filter=t.data.filter,a.loading=!1})},a.settings.httpDelay))},t.sort=function(){a.loading=!0,e.get(a.settings.routing.sortTracks,{params:{page:a.settings.page,sort:a.sort.field,order:a.sort.order,filter:a.filter}}).then(function(t){var e=a.data;e.tracks=t.data.tracks,a.loading=!1})},t.filter=function(){a.loading=!0,r.cancel(a.settings.timeout),a.settings.timeout=r(function(){e.get(a.settings.routing.loadTracks,{params:{page:a.settings.page,sort:a.sort.field,order:a.sort.order,filter:a.filter}}).then(function(t){var e=a.data;e.tracks=t.data.tracks,a.loading=!1})},a.settings.httpDelay)},t.app=a}]).directive("scroll",function(t){return function(e){angular.element(t).bind("scroll",function(){this.pageYOffset+this.outerHeight>=$(document).height()-200&&e.load(),e.$apply()})}}).filter("formatDuration",function(){return function(t){var e=parseInt(t/60,10),r=t%60,r=10>r?"0"+r:r;return e+":"+r}});var appContainer=function(){return{loading:!1,settings:{},sort:{field:"name",order:"asc",set:function(t){this.sort.field=t,this.sort.order="asc"==this.sort.order?"desc":"asc",$scope.sort()}},filter:{value:{},set:function(t,e){this.filter.value[t].push(e)}},data:{tracks:[],filter:[]},init:function(t){this.settings=t}}}();
//# sourceMappingURL=data:application/json;base64,
